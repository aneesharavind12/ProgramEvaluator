package com.testing.web.dao;

import java.io.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.regex.Pattern;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class Utility {
	
	   public static String compile(String fileName,String directory){
	        String exeFileName = fileName.substring(0, fileName.length() - 2); 
	        File dir = new File(directory); 
	        try {
	            Process p = Runtime.getRuntime().exec("cmd /C gcc " + fileName + " -o " + exeFileName, null, dir);
	            BufferedReader ir = new BufferedReader(new InputStreamReader(p.getErrorStream()));   
	            String line = null;
	            String error = "";   
	            while ((line = ir.readLine()) != null) {   
	                 
	            	error = error + line + " " ; 
	            } 
	            System.out.println(error);
	            if (error.contains("error")){
	            	return "Compilation Error";
	            }
	        } catch (Exception e) {
	            
	            e.printStackTrace();
	        }
	        return exeFileName + ".exe";
	    }
	   
	   public static JSONArray testcasesGenerator(JSONArray inputs, String adminFileName, int numberOfTestCases,int numberOfInputs) {
	        
	        String exeFileName = Utility.compile(adminFileName,"E:/EvaluatorDatabase/Admin/");
	        JSONArray autoTestCases = new JSONArray();
	        Random rand = new Random();
	        File dir = new File("E:/EvaluatorDatabase/Admin/");

	        ArrayList autoGeneratedInputs = new ArrayList();
	        JSONObject arrayLog = new JSONObject();
	        
	        for (int i = 0; i < numberOfTestCases; i++) {
	            String input = "";
	            JSONObject readObject = new JSONObject();
	            JSONObject writeTestCases = new JSONObject();
	            int arraySize = 0;
	            int inputCount = 0;
	            for (Object obj1 : inputs) {
	                readObject = (JSONObject) obj1;
	                String inputDataType = (String) readObject.get("inputDataType");
	                String typeOfInput = (String) readObject.get("Type of Input");
	                String variableName = (String) readObject.get("Variable Name");
	                
	                
	                if (typeOfInput.equals("arrayInput")) {
	                    String arraySizeId = (String) readObject.get("arraySize");
	                    if(Pattern.matches("^[0-9]*$", arraySizeId)){
	                    	arraySize = Integer.parseInt(arraySizeId);
	                    	
	                    }
	                    else {
	                    	arraySize = Integer.parseInt((String)arrayLog.get(arraySizeId));
	                    }
	                    
	                }
	                
	           

	                int min_integer_value = 0, max_integer_value = 0;
	                Float min_float_value = 0f, max_float_value = 0f;
	                Double min_double_value = 0.0, max_double_value = 0.0;
	                int min_character_value = 0, max_character_value = 0;
	                int min_string_value = 0, max_string_value = 0;
                    String value = "";
                    if (inputDataType.equals("int")) {
                    	
                        min_integer_value = Integer.parseInt((String) readObject.get("Minimum Value"));
                        max_integer_value = Integer.parseInt((String) readObject.get("Maximum Value"));
                    } else if (inputDataType.equals("float")) {
                        min_float_value = Float.parseFloat((String) readObject.get("Minimum Value"));
                        max_float_value = Float.parseFloat((String) readObject.get("Maximum Value"));
                    }

                    else if (inputDataType.equals("double")) {
                        min_double_value = Double.parseDouble((String) readObject.get("Minimum Value"));
                        max_double_value = Double.parseDouble((String) readObject.get("Maximum Value"));
                    } else if (inputDataType.equals("char")) {
                        min_character_value = Integer.parseInt((String) readObject.get("Minimum Value"));
                        max_character_value = Integer.parseInt((String) readObject.get("Maximum Value"));
                    } else {
                        min_string_value = Integer.parseInt((String) readObject.get("Minimum Value"));
                        max_string_value = Integer.parseInt((String) readObject.get("Maximum Value"));
                    }

	                if (inputDataType.equals("int")) {
	                    int number;
	                    if (typeOfInput.equals("normalInput")) {
	                        number = rand.nextInt(max_integer_value);
	                        if (number < min_integer_value) {
	                            number = min_integer_value;
	                        }
	                        arrayLog.put(variableName,Integer.toString(number) );
	                        input = input + Integer.toString(number) + " ";
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,Integer.toString(number).trim()); 
	                        inputCount++;
	                        
	                    } else {

	                        String arrayInput = "";

	                        for (int j = 0; j < arraySize; j++) {
	                            number = rand.nextInt(max_integer_value);
	                            if (number < min_integer_value) {
	                                number = min_integer_value;
	                            }
	                            arrayInput = arrayInput + Integer.toString(number) + " ";
	                        }
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,arrayInput.trim()); 
	                        inputCount++;
	                        input = input + arrayInput;
	                    }
	                      
	                }

	                else if (inputDataType.equals("float")) {
	                    float number;
	                    if (typeOfInput.equals("normalInput")) {
	                        number = min_float_value + rand.nextFloat() * (max_float_value - min_float_value);

	                        input = input + Float.toString(number) + " ";
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,Float.toString(number).trim()); 
	                        inputCount++;
	                        
	                    } else {

	                        String arrayInput = "";

	                        for (int j = 0; j < arraySize; j++) {
	                            number = min_float_value + rand.nextFloat() * (max_float_value - min_float_value);

	                            arrayInput = arrayInput + Float.toString(number) + " ";
	                        }
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,arrayInput.trim()); 
	                        inputCount++;
	                       
	                        input = input + arrayInput;
	                    }

	                      

	                }

	                else if (inputDataType.equals("double")) {
	                    double number;
	                    if (typeOfInput.equals("normalInput")) {
	                        number = min_double_value + rand.nextDouble() * (max_double_value - min_double_value);

	                        input = input + Double.toString(number) + " ";
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,Double.toString(number).trim()); 
	                        inputCount++;
	                        
	                        
	                    } else {

	                        String arrayInput = "";

	                        for (int j = 0; j < arraySize; j++) {
	                            number = min_double_value + rand.nextDouble() * (max_double_value - min_double_value);

	                            arrayInput = arrayInput + Double.toString(number) + " ";
	                        }
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,arrayInput.trim()); 
	                        inputCount++;
	                        input = input + arrayInput;
	                    }
	                      
	                }

	                else if (inputDataType.equals("char")) {
	                    int number = 0;
	                    char character;
	                    if (typeOfInput.equals("normalInput")) {
	                        number = rand.nextInt(max_character_value);
	                        if (number < min_character_value) {
	                            number = min_character_value;
	                        }
	                        System.out.println(number);
	                        character = (char) number;
	                        input = input + Character.toString(character) + " ";
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,Character.toString(character).trim()); 
	                        inputCount++;
	                        
	                        
	                    } else {

	                        String arrayInput = "";

	                        for (int j = 0; j < arraySize; j++) {
	                            number = rand.nextInt(max_character_value);
	                            if (number < min_character_value) {
	                                number = min_character_value;
	                            }
	                            character = (char) number;

	                            arrayInput = arrayInput + Character.toString(character) + " ";
	                        }
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,arrayInput.trim()); 
	                        inputCount++;
	                        input = input + arrayInput;

	                    }
	                      

	                }

	                else if (inputDataType.equals("string")) {
	                    StringBuilder sb = new StringBuilder();
	                    String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	                    int length = rand.nextInt(5) + 1;

	                    if (typeOfInput.equals("normalInput")) {

	                        for (int j = 0; j < length; j++) {
	                            int index = rand.nextInt(alphabet.length());
	                            char randomChar = alphabet.charAt(index);
	                            sb.append(randomChar);
	                        }
	                        String randomString = sb.toString();
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) , randomString .trim()); 
	                        inputCount++;

	                        input = input + randomString + " ";

	                    } else {

	                        String arrayInput = "";
	                        for (int j = 0; j < arraySize; j++) {
	                            for (int k = 0; k < length; k++) {
	                                int index = rand.nextInt(alphabet.length());
	                                char randomChar = alphabet.charAt(index);
	                                sb.append(randomChar);
	                            }
	                            String randomString = sb.toString();
	                            arrayInput = arrayInput + randomString + " ";
	                        }
	                        writeTestCases.put("input" + " " + Integer.toString(inputCount + 1) ,arrayInput.trim()); 
	                        inputCount++;
	                        

	                    }
	                     

	                }
	                
	             

	            }
	            
	            autoGeneratedInputs.add(input);
	            autoTestCases.add(writeTestCases);
	        }
	        System.out.println(autoGeneratedInputs);
	        System.out.println(autoTestCases);
	        
	       
	       
	        String readInput = "";
	        int k = 0;
	        JSONObject readAutoTestCases = new JSONObject();
	        for(Object obj : autoTestCases){
	            readAutoTestCases = (JSONObject) obj;
	            readInput = (String)autoGeneratedInputs.get(k);
	            readInput = readInput.trim();
	            Process run;
	            try {
	            run = Runtime.getRuntime().exec("cmd /C E:/EvaluatorDatabase/Admin/" + exeFileName, null, dir);
	            OutputStream os = run.getOutputStream();
	            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(os));
	            bw.write(readInput);

	            bw.close();

	            BufferedReader in = new BufferedReader(new
	            InputStreamReader(run.getInputStream()));
	            String line = null;
	            String output = "";

	            while ((line = in.readLine()) != null) {
	            output = output + line + " ";
	            }
	            output = output.trim();
	            readAutoTestCases.put("ExpectedOutput", output);
	            // autoTestCases.add(jsonobj1);
	            k++;

	            } catch (Exception e) {

	            System.out.println(e);
	            }
	        
	         
	        }
	        File deleteUserExe = new File("E:\\EvaluatorDatabase\\Admin\\"+ exeFileName);
			deleteUserExe.delete();
			System.out.println(autoTestCases);
	        return autoTestCases;


	    
	  
}
}
